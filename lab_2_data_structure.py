# -*- coding: utf-8 -*-
"""Lab_2_Data_structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aCvScJvxkM5O4qaM12mRtFYk4JLsyKHv

# Data Structures

##### Basic Data Structures in Python include:
1. List
2. Tuples
3. Dictionaries
4. Sets
5. Compound data structure
"""

# mutable #ordered

"""### list
1. lists are created using [] or the list()
2. list are ordered ( this means list can be indexed)
3. List are mutable (you can add or remove from a list)
4. They can hold different data types  or data structures at the same time

"""

# Examples

week_days = ['Monday','Tuesday','Wednesday','Thursday','Friday']

my_list = ['Ghana','Football', 2, True, 5.9]

my_second_list = ['Derick','Roger',100,['Ghana','Football',2,True,5.9],False]

num = (1,2,3,4,5,6,7,8,9)

num_list = list(num)

week_days

print(week_days)

type(week_days)



"""### list indexing and slicing"""

items = ['pen','pencil','erazor','book','table','chairs','computer']

items[0]

items[1]

items[-1]

items[-3]

"""### list slicing"""

items[:] # The colon is used for slicing

items[3:]

items[-4:]

items[:-4]

items[:4]





"""### list related functions and  methods
len(),min(),max(),sorted(),append(),pop(),remove(),insert() .....

### len()

The len() function is used to check the number of elements in a data
"""

len(week_days)

len(items)

len(num_list)

"""### min(), max()

The min(),max() function return the least value and the maximum 

value respectively  in a numeric data.

They however behave differently with strings.

With strings, the position of the alphabetrs are used.

check the examples below.
"""

min(num_list)

max(num_list)

week_days

min(week_days)

max(week_days)

week_ends = ['Saturday','Sunday']

max(week_ends )

min(week_ends )

"""### sorted()

It is used to sort elements in a data structure
"""

num_list

integers = [] #Empty list

sorted(num_list)

sorted(num_list,reverse=True)

points = [23,4,5,678,2,3,67,100,200,304]
print('sorting from the least to the greater:',sorted(points))
print()
print('sorting from the greater to the least:',sorted(points, reverse = True))

"""### join()

Join is a string method takes a list of strings as an argument, and returns a string consisting of the list elements joined by a separator string

"""

week_days = ['Monday','Tuesday','Wednesday','Thursday','Friday']

week_ends = ['Saturday','Sunday']
print(week_days)
print(week_ends)

' and '.join(week_days)

'/'.join(week_ends)

#week_days.join(week_ends) # Do not do this assumming you want to combine the two lists.
                          # This will give you and error. Use the append method rather.

message = "\n".join(["Data Analytis","with","python","is","powerful"])
print(message)

message = "-".join(["Data Analytis","with","python","is","powerful"])
print(message)

message = "/".join(["Data Analytis","with","python","is","powerful"])
print(message)

names = ["Carol", "Albert", "Ben", "Donna"]
print(" & ".join(sorted(names)))

"""### append()

The append() method is used to add elements to a list.
"""

letters = ['a','b','c','d']
letters.append('z')
print(letters)

names = ['Albert', 'Ben', 'Carol', 'Donna']
names.append("Eugenia")
print(sorted(names))

class_members = ['Kelden','Jessica','Auralia','Domenic','Jessie']

len?

help(len)

len()

"""### pop()"""

words = ['boy','girl','man','dog','man']

words.pop()

words

words.pop()

words

"""### remove()

"""

colors = ['red','gold','green','indigo']

colors

sorted(colors)

colors.remove('gold')
print(colors)

colors

colors.insert(2,'yellow')
print(colors)

"""### Membership operators

Membership operators are used to check if a particular item is a

member of a given data type or  structure. 

They return a bool when used.

Membership operators include:
**in** – used to check whether an element is part of a data type or structure.
**not in** - used to check whether an element is not part of a data type or structure.
"""

#Example
vegetables = ['onions', 'pepper','okra','lettuce']
'pepper' in vegetables

'yam' in vegetables

'pepper' not in vegetables

'yam' not in vegetables

"""# tuples"""

tuple_a = 'one','two','three'

tuple_b = (1,2,3)

tuple_c = 1,2,3

print(tuple_a)
print(tuple_b)
print(tuple_c)
print()
print(tuple_b == tuple_c)
print()
print(tuple_a[1])

marks = 70,87,90

Ernest,Ola,Isaac = marks # tuple unpacking

class_mates = ('Kelden','Jessica','Auralia','Domenic')

class_mates

class_mates[0]

class_mates[-1]

#class_mates.append('Jessie')



print(Ernest)

print(Ola)

print(Isaac)

kofi_score = 80, 92, 86
assignment_score, exercise_score, test_score = marks

print(assignment_score)
print(exercise_score)
print(test_score)

country_and_capital = [('Ghana','Accra'),('Nigeria','Abuja'),('Togo','Lome')]

country_and_capital

country_and_capital[1]



"""# Dictionaries

A dictionary in python is a mutable data type that stores mappings of unique keys to values.

They are created by using { }.

Dictionaries can have keys of any immutable type, like integers or tuples, not just strings. It’s also not compulsory for every key to have the same data type.

Elements in a dictionary can be accessed using the keys and [].

One important dictionary related method is the get() method.

The get() method looks up values in a dictionary, but unlike square brackets, get()
returns None (or a default value of your choice) if the key isn't found.


"""

# Example
students_score = {'John' :80, 'Rachel':79,'Amo':90}

type(students_score )

students_score

students_score['John']

students_score.get('John')

students_score.keys()

students_score.values()

'Sampson' in students_score.keys()

#print(students_score['Sampson']) # this will throw an error at you since Sampson is not part of the keys

print(students_score.get('Sampson')) # This will return none

d = {'A':100, 'B':200, 'C':100}

d.keys()

'T' in d.keys()

d['D'] = 300

d

"""### Dictionary related methods"""

t = d.items()

type(t)



"""# set

It's used to remove duplicates in data. It also allows methods like: pop(), is in,is not, in, add() 

Sets are created using { } or set() function
"""

#Examples
country = ['Ghana','Togo','India','Nigeria','India','Ghana','USA']

country

print('\n'.join(country))

country_set = set(country)
print(country_set)

#country_set[0] # Note that elements of a set are not ordered and therefore cannot indexed

print('\n'.join(set(country)))

country_set.pop()

country.pop()

country_set

alp=['c','d','e','f','g','h','i'] 
alp.pop()

a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
b = set(a)

print(b)

b.add(5)

print(b)

b.pop()

my_set = set() # this is called empty set

type(my_set)

"""### Set operations
* union
* intersection
* difference
"""

x = {1,2,3,4,6}
y = {5,6,7,8,1}

x.union(y) #union

x|y # union



x.intersection(y) # intersection

x&y

x.difference(y) #difference

x-y

y-x

